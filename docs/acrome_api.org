#+TITLE: Acrome API
#+AUTHOR: Haldun Komsuoglu


  - [[https://pypi.org/project/acrome-smd/][Acrome SMD on pyPI]]
  - [[https://github.com/Acrome-Smart-Motion-Devices/python-library][Acrome Python Library on GitHub]]

    
* Python Library
  
This set of API notes are for [[https://github.com/Acrome-Smart-Motion-Devices/python-library/releases/tag/1.1.4][version 1.1.4]].

#+begin_src sh
git clone --no-checkout https://github.com/Acrome-Smart-Motion-Devices/python-library.git acrome_api
cd acrome_api
git checkout tags/1.1.4
#+end_src

** Master
*** Configuration Management
**** eeprom_write

#+begin_src python
eeprom_write(self, id: int, ack=False)
#+end_src

This method clears the EEPROM config of the driver and
restores it to factory defaults.

Arguments:
  - id: argument is the device ID of the connected driver.

Returns: None

**** update_driver_id

#+begin_src python
update_driver_id(self, id: int, id_new: int)
#+end_src

This method updates the device ID of the driver
temporarily. [[eeprom_write][eeprom_write(self, id:int)]] method must be
called to register the new device ID.

Arguments:    
  - id: argument is the device ID of the connected driver.
  - id_new: argument is the new intended device ID of the
    connected driver.
    
Returns: None

*** Motor Drive Control
**** enable_torque

#+begin_src python
enable_torque(id: int, en: bool)
#+end_src

Enable power to the motor of the driver.
    
Arguments:
  id (int): The device ID of the driver
  en (bool): Enable. True enables the torque.
  
Returns: None
  
**** set_operation_mode

#+begin_src python
set_operation_mode(id: int, mode: smd._internals.OperationMode)
#+end_src

Set the operation mode of the driver.
    
Arguments:
  - id (int): The device ID of the driver.
  - mode (OperationMode): One of the PWM, Position,
    Velocity, Torque modes.

Returns: None

**** get_operation_mode

#+begin_src python
get_operation_mode(id: int)
#+end_src

Get the current operation mode from the driver.
    
Arguments:
  - id (int): The device ID of the driver.

Returns: list | None: Returns the list containing the
operation mode, otherwise None.
        
*** Voltage Mode Control
**** set_duty_cycle

#+begin_src python
set_duty_cycle(id: int, pct: float)
#+end_src

Set the duty cycle to the motor for PWM control mode in
terms of percentage.  Negative values will change the motor
direction.
    
Arguments:
  - id (int): The device ID of the driver.
  - pct (int | float): Duty cycle percentage.
    
Returns: None

*** Speed Mode Control
**** set_shaft_cpr

#+begin_src python
set_shaft_cpr(self, id: int, cpr: float)
#+end_src

Set the count per revolution (CPR) of the motor output shaft.

Arguments:
  - id (int): The device ID of the driver.
  - cpr (float): The CPR value of the output shaft/

Returns: None
    
**** get_shaft_cpr

#+begin_src python
get_shaft_cpr(self, id: int)
#+end_src

Get the count per revolution (CPR) of the motor output shaft.

Arguments:
  - id (int): The device ID of the driver.

Returns: list | None: Returns the list containing the
output shaft CPR, otherwise None.

**** set_shaft_rpm

#+begin_src python
set_shaft_rpm(self, id: int, rpm: float)
#+end_src

Set the revolution per minute (RPM) value of the output
shaft at 12V rating.

Args:
  - id (int): The device ID of the driver.
  - rpm (float): The RPM value of the output shaft at 12V

Returns: None
    
**** get_shaft_rpm

#+begin_src python
get_shaft_rpm(self, id: int)
#+end_src

Get the revolution per minute (RPM) value of the output
shaft at 12V rating.

Args:
  - id (int): The device ID of the driver.

Returns: list | None: Returns the list containing the
output shaft RPM characteristics, otherwise None.

**** set_velocity_limit

#+begin_src python
set_velocity_limit(self, id: int, vl: int)
#+end_src

Set the velocity limit for the motor output shaft in terms
of RPM. The velocity limit applies only in velocity
mode. Default velocity limit is 65535.

Args:
  - id (int): The device ID of the driver.
  - vl (int): New velocity limit (RPM)

Returns: None
    
**** get_velocity_limit

#+begin_src python
get_velocity_limit(self, id: int)
#+end_src

Get the velocity limit from the driver in terms of RPM.

Args:
  - id (int): The device ID of the driver.

Returns: list | None: Returns the list containing the
velocity limit, otherwise None.

**** set_velocity

#+begin_src python
set_velocity(self, id: int, sp: float)
#+end_src

Set the desired setpoint for the velocity control in terms
of RPM.

Args:
  - id (int): The device ID of the driver.
  - sp (int | float): Velocity control setpoint.

Returns: None
    
**** get_velocity

#+begin_src python
get_velocity(self, id: int)
#+end_src

Get the current velocity of the motor output shaft from the
driver in terms of RPM.

Args:
  - id (int): The device ID of the driver.

Returns: list | None: Returns the list containing the
current velocity, otherwise None.

**** set_control_parameters_velocity

#+begin_src python
set_control_parameters_velocity(self, id: int, p=None, i=None, d=None, db=None, ff=None, ol=None)
#+end_src

Set the control block parameters for velocity control
mode. Only assigned parameters are written, None's are
ignored. The default max output limit is 950.

Args:
  - id (int): The device ID of the driver.
  - p (float): Proportional gain. Defaults to None.
  - i (float): Integral gain. Defaults to None.
  - d (float): Derivative gain. Defaults to None.
  - db (float): Deadband (of the setpoint type). Defaults to None.
  - ff (float): Feedforward. Defaults to None.
  - ol (float): Maximum output limit. Defaults to None.

Returns: None

**** get_control_parameters_velocity

#+begin_src python
get_control_parameters_velocity(self, id: int)
#+end_src

Get the velocity control block parameters.

Args:
  - id (int): The device ID of the driver.

Returns: list | None: Returns the list [P, I, D, FF, DB,
OUTPUT_LIMIT], otherwise None.
                
Returns: None

